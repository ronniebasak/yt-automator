#!/usr/bin/env python3\n\"\"\"\nAudio Format Converter Script\nConverts any audio file to PCM16 or PCM8 WAV format for compatibility with audio processing systems.\n\nUsage:\n    python convert_audio.py input.wav [--format pcm16|pcm8] [--sample-rate 44100] [--output output.wav]\n\"\"\"\n\nimport argparse\nimport subprocess\nimport sys\nimport os\nfrom pathlib import Path\n\ndef check_ffmpeg():\n    \"\"\"Check if ffmpeg is installed and available.\"\"\"\n    try:\n        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)\n        return True\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        return False\n\ndef get_audio_info(input_file):\n    \"\"\"Get audio file information using ffprobe.\"\"\"\n    try:\n        cmd = [\n            'ffprobe', '-v', 'quiet', '-print_format', 'json',\n            '-show_format', '-show_streams', input_file\n        ]\n        result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        print(f\"Error getting audio info: {e}\")\n        return None\n\ndef convert_audio(input_file, output_file, pcm_format='pcm16', sample_rate=44100):\n    \"\"\"Convert audio file to specified PCM format.\"\"\"\n    \n    # Map format names to ffmpeg codec names\n    codec_map = {\n        'pcm16': 'pcm_s16le',  # 16-bit signed integer PCM\n        'pcm8': 'pcm_s8'       # 8-bit signed integer PCM\n    }\n    \n    if pcm_format not in codec_map:\n        raise ValueError(f\"Unsupported format: {pcm_format}. Use 'pcm16' or 'pcm8'\")\n    \n    codec = codec_map[pcm_format]\n    \n    # Build ffmpeg command\n    cmd = [\n        'ffmpeg',\n        '-i', input_file,           # Input file\n        '-acodec', codec,           # Audio codec\n        '-ar', str(sample_rate),    # Sample rate\n        '-ac', '1',                 # Convert to mono (optional, remove if you want to preserve channels)\n        '-y',                       # Overwrite output file\n        output_file                 # Output file\n    ]\n    \n    try:\n        print(f\"Converting {input_file} to {pcm_format.upper()} format...\")\n        print(f\"Command: {' '.join(cmd)}\")\n        \n        result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n        \n        print(f\"‚úÖ Successfully converted to {output_file}\")\n        print(f\"Format: {pcm_format.upper()}\")\n        print(f\"Sample Rate: {sample_rate} Hz\")\n        \n        return True\n        \n    except subprocess.CalledProcessError as e:\n        print(f\"‚ùå Error during conversion:\")\n        print(f\"Return code: {e.returncode}\")\n        print(f\"Error output: {e.stderr}\")\n        return False\n\ndef auto_generate_output_name(input_file, pcm_format):\n    \"\"\"Generate output filename automatically.\"\"\"\n    input_path = Path(input_file)\n    name_without_ext = input_path.stem\n    directory = input_path.parent\n    \n    output_name = f\"{name_without_ext}_{pcm_format}.wav\"\n    return directory / output_name\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Convert audio files to PCM16 or PCM8 WAV format\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n    # Convert to PCM16 with default settings\n    python convert_audio.py input.wav\n    \n    # Convert to PCM8 format\n    python convert_audio.py input.mp3 --format pcm8\n    \n    # Convert with custom sample rate and output file\n    python convert_audio.py input.flac --format pcm16 --sample-rate 48000 --output output.wav\n    \n    # Batch convert all wav files in current directory\n    for file in *.wav; do python convert_audio.py \"$file\"; done\n        \"\"\"\n    )\n    \n    parser.add_argument('input', help='Input audio file path')\n    parser.add_argument('--format', choices=['pcm16', 'pcm8'], default='pcm16',\n                       help='PCM format (default: pcm16)')\n    parser.add_argument('--sample-rate', type=int, default=44100,\n                       help='Sample rate in Hz (default: 44100)')\n    parser.add_argument('--output', help='Output file path (auto-generated if not specified)')\n    parser.add_argument('--preserve-channels', action='store_true',\n                       help='Preserve original number of channels (default: convert to mono)')\n    parser.add_argument('--info', action='store_true',\n                       help='Show input file information before conversion')\n    \n    args = parser.parse_args()\n    \n    # Check if ffmpeg is available\n    if not check_ffmpeg():\n        print(\"‚ùå Error: ffmpeg is not installed or not found in PATH\")\n        print(\"Please install ffmpeg: https://ffmpeg.org/download.html\")\n        sys.exit(1)\n    \n    # Check if input file exists\n    if not os.path.exists(args.input):\n        print(f\"‚ùå Error: Input file '{args.input}' does not exist\")\n        sys.exit(1)\n    \n    # Generate output filename if not provided\n    output_file = args.output\n    if not output_file:\n        output_file = auto_generate_output_name(args.input, args.format)\n    \n    # Show input file info if requested\n    if args.info:\n        print(\"üìä Input file information:\")\n        info = get_audio_info(args.input)\n        if info:\n            import json\n            try:\n                data = json.loads(info)\n                if 'streams' in data and len(data['streams']) > 0:\n                    stream = data['streams'][0]\n                    print(f\"  Codec: {stream.get('codec_name', 'Unknown')}\")\n                    print(f\"  Sample Rate: {stream.get('sample_rate', 'Unknown')} Hz\")\n                    print(f\"  Channels: {stream.get('channels', 'Unknown')}\")\n                    print(f\"  Bit Depth: {stream.get('bits_per_sample', 'Unknown')} bits\")\n                    print(f\"  Duration: {data['format'].get('duration', 'Unknown')} seconds\")\n            except json.JSONDecodeError:\n                print(\"  Could not parse audio information\")\n        print()\n    \n    # Perform conversion\n    success = convert_audio(\n        args.input, \n        str(output_file), \n        args.format, \n        args.sample_rate\n    )\n    \n    if success:\n        print(f\"\\nüéâ Conversion completed successfully!\")\n        print(f\"Output file: {output_file}\")\n    else:\n        print(\"\\n‚ùå Conversion failed!\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()\n
